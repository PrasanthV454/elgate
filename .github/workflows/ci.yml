name: Elgate CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Standard build and basic tests on regular runners
  # build_and_basic_test:
  #   name: Build and Basic Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #         components: rustfmt, clippy

  #     - name: Check format
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Clippy
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: --all-targets -- -D warnings

  #     - name: Build
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --verbose

  #     - name: Run basic tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --verbose --no-default-features

  #     - name: Security audit
  #       uses: actions-rs/audit-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  # Advanced tests on larger runners
  advanced_tests:
    name: Advanced Tests (NUMA, io_uring)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y numactl hwloc linux-tools-generic
      
      - name: Check for NUMA support (with detailed logging)
        id: check-numa
        run: |
          echo "=== NUMA Debugging Information ==="
          echo "System information:"
          uname -a
          
          echo "\n=== CPU Information ==="
          lscpu
          
          echo "\n=== Memory Information ==="
          free -h
          
          echo "\n=== NUMA Hardware Detection ==="
          numactl --hardware
          
          echo "\n=== NUMA Node Distance ==="
          if [ -f /sys/devices/system/node/node0/distance ]; then
            cat /sys/devices/system/node/node*/distance
          else
            echo "Node distance information not available"
          fi
          
          echo "\n=== NUMA Available Memory ==="
          if [ -d /sys/devices/system/node/node0/ ]; then
            cat /sys/devices/system/node/node*/meminfo
          else
            echo "Node memory information not available"
          fi
          
          echo "\n=== Linux Kernel NUMA Support ==="
          grep NUMA /boot/config-$(uname -r) || echo "NUMA config not found"
          
          # Now proceed with actual detection for GitHub Actions
          if numactl --hardware | grep -q "available"; then
            echo "NUMA architecture detected"
            echo "has_numa=true" >> $GITHUB_OUTPUT
            # Get NUMA node count
            numa_nodes=$(numactl --hardware | grep "available" | awk '{print $2}')
            echo "numa_nodes=$numa_nodes" >> $GITHUB_OUTPUT
          else
            echo "No NUMA architecture detected"
            echo "has_numa=false" >> $GITHUB_OUTPUT
            echo "numa_nodes=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Check io_uring support
        id: check-io-uring
        run: |
          # Check kernel version for io_uring (5.1+)
          kernel_version=$(uname -r | cut -d. -f1-2)
          if [[ $(echo "$kernel_version >= 5.1" | bc) -eq 1 ]]; then
            echo "Kernel supports io_uring"
            echo "has_io_uring=true" >> $GITHUB_OUTPUT
          else
            echo "Kernel does not support io_uring"
            echo "has_io_uring=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure system for io_uring
        run: |
          echo "=== Setting up io_uring configuration ==="
          # Increase AIO limits
          sudo sysctl -w fs.aio-max-nr=1048576
          
          # Check kernel io_uring support
          if grep -q io_uring /proc/filesystems; then
            echo "Kernel has io_uring filesystem support"
          else
            echo "Warning: io_uring not detected in /proc/filesystems"
          fi
          
          # Set up permissions if device exists
          if [ -e /dev/io_uring ]; then
            sudo chmod 666 /dev/io_uring
            echo "Updated permissions for /dev/io_uring"
          fi
          
          # Check for liburing support
          if ldconfig -p | grep -q liburing; then
            echo "liburing is installed"
          else
            echo "Installing liburing development files"
            sudo apt-get update
            sudo apt-get install -y liburing-dev
          fi
          
          # Set higher limits for file descriptors
          ulimit -n 65536 || echo "Failed to increase file descriptor limit"
          
          # Enable io_uring tracing for debugging
          if [ -d /sys/kernel/debug/tracing/events/io_uring ]; then
            sudo sh -c 'echo 1 > /sys/kernel/debug/tracing/events/io_uring/enable'
            echo "Enabled io_uring kernel tracing"
          fi
      
      - name: Run full test suite
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
      
      - name: Run tests with all features
        run: |
          echo "=== Testing with All Features Enabled ==="
          # Test with both NUMA and io_uring features with maximum verbosity
          RUST_LOG=debug RUST_BACKTRACE=full cargo test --all-features -vv -- --nocapture --test-threads=1 --show-output
      
      - name: Run examples with all features
        run: |
          # Run key examples with all features
          cargo run --all-features --example thread_builder
          # Add other examples that benefit from all features
      
      - name: Run examples
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --example thread_builder
      
      - name: Run NUMA-specific tests (with verbose logs)
        if: steps.check-numa.outputs.has_numa == 'true'
        run: |
          echo "Running on a NUMA system with ${{ steps.check-numa.outputs.numa_nodes }} nodes"
          
          echo "\n=== Running NUMA Commands Manually ==="
          numactl --show
          
          echo "\n=== Listing NUMA Directories ==="
          ls -la /sys/devices/system/node/
          
          echo "\n=== CPU-to-NUMA Node Mapping ==="
          for cpu in /sys/devices/system/cpu/cpu*/; do
            if [ -f "$cpu/node0/cpumap" ]; then
              echo "$(basename $cpu): $(cat $cpu/node*/cpumap)"
            else
              echo "$(basename $cpu): No direct node mapping found"
            fi
          done
          
          echo "\n=== Starting NUMA Feature Tests ==="
          # Run with verbose output and print test output even if successful
          RUST_BACKTRACE=1 cargo test --features numa --verbose -- --nocapture
          
          echo "\n=== Starting Thread Builder Example ==="
          # Run the thread_builder example with debug output
          RUST_LOG=debug cargo run --example thread_builder
      
      - name: Run io_uring-specific tests
        if: steps.check-io-uring.outputs.has_io_uring == 'true'
        run: |
          echo "=== Running io_uring Tests ==="
          # Get the full path to cargo
          CARGO_PATH=$(which cargo)
          
          # 1. First try running without sudo, but handle failures gracefully
          echo "Attempting io_uring tests without elevated privileges:"
          RUST_BACKTRACE=1 $CARGO_PATH test --features io_uring -- --nocapture || echo "Regular permission tests failed (this is expected)"
          
          # 2. Run specific io_uring tests with sudo
          echo "Running io_uring tests with elevated privileges:"
          sudo -E RUST_BACKTRACE=1 $CARGO_PATH test --features io_uring -- --nocapture 'disk::io_uring' 'net::io_uring'
          
          # 3. Run io_uring examples if they exist
          if ls examples/*io_uring* 1> /dev/null 2>&1; then
            echo "Running io_uring examples with elevated privileges:"
            for example in examples/*io_uring*; do
              basename=$(basename $example .rs)
              sudo -E $CARGO_PATH run --example $basename --features io_uring
            done
          fi
